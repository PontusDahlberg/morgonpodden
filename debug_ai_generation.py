#!/usr/bin/env python3
"""
Debug script f√∂r att testa AI-generering och text-rensning
"""

import sys
import os
import re
import requests
from dotenv import load_dotenv

load_dotenv()

def clean_script_text(text: str) -> str:
    """Rensa manus-text fr√•n stage directions och karakt√§rsnamn"""
    print("üßπ F√ñRE text-rensning:")
    print("-" * 50)
    print(text[:500] + "..." if len(text) > 500 else text)
    print("-" * 50)
    
    original_text = text
    
    # Ta bort manus-headers och metadata
    text = re.sub(r'\[.*?\]', '', text)  # [PODCAST-MANUS: ...] 
    text = re.sub(r'---.*?---', '', text, flags=re.DOTALL)  # --- metadata ---
    
    # Ta bort karakt√§rsnamn i b√∂rjan av meningar
    text = re.sub(r'^(Sanna|George):\s*', '', text, flags=re.MULTILINE)
    text = re.sub(r'\n(Sanna|George):\s*', '\n', text)
    
    # Ta bort stage directions i parenteser
    text = re.sub(r'\([^)]*\)', '', text)
    
    # Ta bort karakt√§rsnamn f√∂ljt av colon mitt i text
    text = re.sub(r'\b(Sanna|George):\s*', '', text)
    
    # Rensa extra whitespace och tomma rader
    text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)  # Max 2 newlines
    text = re.sub(r'^\s+', '', text, flags=re.MULTILINE)  # Leading spaces
    text = text.strip()
    
    print("üßπ EFTER text-rensning:")
    print("-" * 50)
    print(text[:500] + "..." if len(text) > 500 else text)
    print("-" * 50)
    print(f"L√§ngd: {len(original_text)} ‚Üí {len(text)} tecken")
    
    # R√§kna stycken
    paragraphs = [p.strip() for p in text.split('\n\n') if p.strip()]
    print(f"Antal stycken: {len(paragraphs)}")
    
    return text

def test_ai_generation():
    """Testa AI-generering med debug output"""
    
    # Mock news f√∂r test
    news_summary = """- AI breakthrough (TechCrunch): New AI model released
- Climate tech advances (SVT): Green energy progress
- Cybersecurity alert (DN): Swedish companies at risk"""
    
    week_info = {'week': 38, 'year': 2025}
    
    api_key = os.getenv('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå No API key found")
        return
    
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://manniska-maskin-miljo.com',
        'X-Title': 'M√§nniska Maskin Milj√∂ Podcast'
    }
    
    prompt = f"""Du √§r v√§rd f√∂r den svenska podcasten "M√§nniska Maskin Milj√∂" som fokuserar p√• teknik, AI och milj√∂.

Skapa ett engagerande podcast-manus f√∂r vecka {week_info['week']}, {week_info['year']} baserat p√• dessa nyheter:

{news_summary}

VIKTIGT - Skriv ENDAST ren taltext utan:
- Inga namn p√• talare (som "Sanna:", "George:")
- Inga stage directions (som "(entusiastiskt)", "(allvarlig ton)")
- Inga manus-markeringar eller rubriker
- Bara ren text som ska l√§sas upp

Krav f√∂r manuset:
- Skriv p√• svenska
- B√∂rja med v√§lkomst: "V√§lkommen till M√§nniska Maskin Milj√∂, vecka {week_info['week']}!"
- Skriv som en sammanh√§ngande ber√§ttelse utan karakt√§rsnamn
- Variera tonen naturligt: professionell, sp√§nnande, allvarlig eller v√§nlig
- Dela upp i naturliga stycken (5-8 stycken) f√∂r r√∂stv√§xling
- Avsluta med "Det var allt f√∂r denna vecka. Tack f√∂r att ni lyssnade!"
- Totalt cirka 3-4 minuter l√§sning (2000-2500 ord)

Exempel p√• r√§tt format:
V√§lkommen till M√§nniska Maskin Milj√∂, vecka 38!

Den h√§r veckan har vi sp√§nnande utvecklingar inom artificiell intelligens...

Nu kommer vi till mer allvarliga nyheter om cybers√§kerhet...

Fokusera p√• svenska nyheter och koppla till milj√∂/teknik-perspektiv √§ven f√∂r internationella nyheter."""

    payload = {
        'model': 'anthropic/claude-3.5-sonnet',
        'messages': [
            {'role': 'user', 'content': prompt}
        ],
        'max_tokens': 3000,
        'temperature': 0.7
    }
    
    print("ü§ñ Anropar OpenRouter API...")
    
    try:
        response = requests.post(
            'https://openrouter.ai/api/v1/chat/completions',
            headers=headers,
            json=payload
        )
        
        if response.status_code == 200:
            result = response.json()
            ai_content = result['choices'][0]['message']['content']
            
            print("‚úÖ AI-svar mottaget")
            print(f"Ursprunglig l√§ngd: {len(ai_content)} tecken")
            
            # Testa text-rensning
            cleaned_content = clean_script_text(ai_content)
            
            # Spara f√∂r analys
            with open('debug_original.txt', 'w', encoding='utf-8') as f:
                f.write(ai_content)
            with open('debug_cleaned.txt', 'w', encoding='utf-8') as f:
                f.write(cleaned_content)
            
            print("üíæ Sparat som debug_original.txt och debug_cleaned.txt")
            
        else:
            print(f"‚ùå API error: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    test_ai_generation()
