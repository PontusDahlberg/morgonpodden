#!/usr/bin/env python3
"""
Intelligent musikmixer f√∂r M√§nniska Maskin Milj√∂ podcast
V√§ljer musik baserat p√• emotion och mixar med tal
"""

import json
import os
import logging
from typing import Dict, List, Optional
from pydub import AudioSegment
from pydub.effects import normalize
import random

logger = logging.getLogger(__name__)

# Import metadata manager
try:
    from music_metadata_manager import MusicMetadataManager
    METADATA_AVAILABLE = True
except ImportError:
    METADATA_AVAILABLE = False
    logger.warning("MusicMetadataManager inte tillg√§nglig, anv√§nder fallback-metod")

class MusicMixer:
    def __init__(self, music_library_path: str = "music_library.json"):
        self.music_library_path = music_library_path
        self.music_library = self.load_music_library()
        
        # Initiera metadata manager om tillg√§nglig
        if METADATA_AVAILABLE:
            self.metadata_manager = MusicMetadataManager()
        else:
            self.metadata_manager = None
        
    def load_music_library(self) -> Dict:
        """Ladda musik-bibliotek fr√•n JSON"""
        try:
            with open(self.music_library_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning(f"Music library not found: {self.music_library_path}")
            return {"tracks": {}, "moods": {}}
    
    def get_music_for_emotion(self, emotion: str, category: str = "news") -> Optional[str]:
        """
        Hitta l√§mplig musik f√∂r en given emotion
        
        Args:
            emotion: exciting, serious, friendly, professional
            category: intro, news, tech, transition, outro
        
        Returns:
            S√∂kv√§g till musikfil eller None
        """
        # F√∂rb√§ttrad mappa v√•ra emotions till musik-moods
        emotion_to_mood = {
            'exciting': ['upbeat', 'playful', 'mysterious'],  # Mer energisk musik
            'serious': ['serious', 'dramatic'],  # Beh√•ll allvarlig f√∂r viktiga nyheter
            'friendly': ['playful', 'calm', 'upbeat'],  # Mer positiv musik
            'professional': ['calm', 'playful']  # Mindre dystert f√∂r professionellt inneh√•ll
        }
        
        # Speciella regler f√∂r bryggmusik - undvik f√∂r dyster musik
        if category == "transition":
            # F√∂r bryggkor, prioritera ljusare toner
            emotion_to_mood = {
                'exciting': ['upbeat', 'playful'],  # Bara energisk musik
                'serious': ['calm', 'serious'],  # Undvik dramatisk f√∂r bryggkor
                'friendly': ['playful', 'upbeat'],  # Bara glad musik
                'professional': ['calm', 'playful']  # Beh√•ll ljus ton
            }
        
        target_moods = emotion_to_mood.get(emotion, ['calm', 'playful'])
        
        # Hitta matchande sp√•r - prioritera r√§tt kategori f√∂rst
        matching_tracks = []
        for track_id, track in self.music_library.get("tracks", {}).items():
            # Kolla om kategori matchar
            if category in track.get("categories", []):
                # Kolla om mood matchar
                track_moods = track.get("moods", [])
                if any(mood in track_moods for mood in target_moods):
                    matching_tracks.append(track)
        
        # Om ingen matchning p√• kategori, leta bredare men undvik dyster musik
        if not matching_tracks:
            for track_id, track in self.music_library.get("tracks", {}).items():
                track_moods = track.get("moods", [])
                # Undvik dramatic och mysterious f√∂r bryggkor
                if category == "transition" and ('dramatic' in track_moods or 'mysterious' in track_moods):
                    continue
                if any(mood in track_moods for mood in target_moods):
                    matching_tracks.append(track)
        
        if matching_tracks:
            # V√§lj slumpm√§ssigt fr√•n matchande sp√•r
            selected_track = random.choice(matching_tracks)
            logger.info(f"üéµ Selected {emotion} music: {selected_track.get('title', 'Unknown')} ({', '.join(selected_track.get('moods', []))})")
            return selected_track.get("path")
        
        logger.warning(f"No suitable music found for emotion: {emotion}, category: {category}")
        return None
    
    def get_music_by_metadata(self, mood: str = None, tempo: str = None, energy: str = None, 
                             intensity: str = None, category: str = None, exclude: List[str] = None) -> Optional[str]:
        """
        V√§lj musik baserat p√• metadata-taggar
        
        Args:
            mood: Mood som "calm", "energetic", "peaceful", "uplifting"
            tempo: Tempo som "slow", "medium", "fast"
            energy: Energiniv√• som "low", "medium", "high"
            intensity: Intensitet som "low", "medium", "high"
            category: Kategori som "background", "intro", "outro"
            exclude: Lista med filer att undvika
        
        Returns:
            S√∂kv√§g till vald musikfil eller None
        """
        if not self.metadata_manager:
            logger.warning("Metadata manager inte tillg√§nglig, anv√§nder fallback")
            return None
        
        # S√∂k matchande l√•tar
        matching_tracks = self.metadata_manager.search_tracks(
            mood=mood, tempo=tempo, energy=energy, 
            intensity=intensity, category=category
        )
        
        # Filtrera bort excluded filer
        if exclude:
            exclude_basenames = [os.path.basename(path) for path in exclude]
            matching_tracks = [
                track for track in matching_tracks 
                if track["filename"] not in exclude_basenames
            ]
        
        if matching_tracks:
            # V√§lj slumpm√§ssigt fr√•n matchande
            selected_track = random.choice(matching_tracks)
            logger.info(f"üéµ Valde fr√•n metadata: {selected_track['filename']} "
                       f"(mood: {', '.join(selected_track.get('moods', []))}, "
                       f"tempo: {selected_track.get('tempo', 'N/A')}, "
                       f"energy: {selected_track.get('energy', 'N/A')})")
            return selected_track["path"]
        
        logger.warning(f"Ingen musik matchade metadata: mood={mood}, tempo={tempo}, energy={energy}")
        return None
    
    def mix_speech_with_music(self, speech_file: str, music_file: str, output_file: str, 
                            music_volume: float = -20, fade_in: int = 1000, fade_out: int = 1000) -> bool:
        """
        Mixa tal med bakgrundsmusik
        
        Args:
            speech_file: S√∂kv√§g till tal-audio
            music_file: S√∂kv√§g till musik
            output_file: Utdata-fil
            music_volume: Musik-volym i dB (negativ f√∂r l√§gre)
            fade_in: Fade-in tid f√∂r musik (ms)
            fade_out: Fade-out tid f√∂r musik (ms)
        
        Returns:
            True om framg√•ngsrik, False annars
        """
        try:
            # Ladda audio-filer
            speech = AudioSegment.from_file(speech_file)
            music = AudioSegment.from_file(music_file)
            
            # Justera musik-volym
            music = music + music_volume
            
            # Loopa musik om den √§r kortare √§n talet
            while len(music) < len(speech):
                music = music + music
            
            # Besk√§r musik till samma l√§ngd som talet
            music = music[:len(speech)]
            
            # L√§gg till fade-in och fade-out
            music = music.fade_in(fade_in).fade_out(fade_out)
            
            # Mixa ihop
            mixed = speech.overlay(music)
            
            # Normalisera och exportera
            mixed = normalize(mixed)
            mixed.export(output_file, format="mp3")
            
            logger.info(f"‚úÖ Mixed audio exported: {output_file}")
            return True
            
        except Exception as e:
            logger.error(f"Error mixing audio: {e}")
            return False
    
    def create_podcast_with_musical_bridges(self, segments: List[Dict], output_file: str) -> bool:
        """
        Skapa podcast med musik som bryggkor mellan inslag, inte konstant bakgrund
        
        Args:
            segments: Lista med {'speech_file': path, 'emotion': str, 'duration': int}
            output_file: Final utdata-fil
        
        Returns:
            True om framg√•ngsrik
        """
        try:
            combined = AudioSegment.empty()
            
            for i, segment in enumerate(segments):
                speech_file = segment['speech_file']
                emotion = segment['emotion']
                
                # Ladda tal-audio
                if not os.path.exists(speech_file):
                    logger.warning(f"Speech file not found: {speech_file}")
                    continue
                    
                speech = AudioSegment.from_file(speech_file)
                
                # F√∂r f√∂rsta segmentet: alltid anv√§nd "Mellan Dr√∂m och Verklighet" som intro
                if i == 0:
                    intro_music_path = os.path.join(os.path.dirname(__file__), "audio", "music", "Mellan Dr√∂m och Verklighet.mp3")
                    if os.path.exists(intro_music_path):
                        intro = AudioSegment.from_file(intro_music_path)[:4000]  # 4 sekunder
                        intro = intro.fade_out(1000) - 15  # Fade ut, l√§gre volym
                        combined += intro
                        logger.info("üéµ Anv√§nder fast intro: Mellan Dr√∂m och Verklighet")
                    else:
                        # Fallback till gammal metod om filen inte hittas
                        intro_music = self.get_music_for_emotion("professional", "intro")
                        if intro_music and os.path.exists(intro_music):
                            intro = AudioSegment.from_file(intro_music)[:4000]  # 4 sekunder
                            intro = intro.fade_out(1000) - 15  # Fade ut, l√§gre volym
                            combined += intro
                
                # L√§gg till tal-segmentet
                combined += speech
                
                # Mellan segment (inte efter sista): kort musical bridge
                if i < len(segments) - 1:
                    next_emotion = segments[i + 1]['emotion']
                    
                    # V√§lj bridge-musik baserat p√• n√§sta segments emotion
                    bridge_music = self.get_music_for_emotion(next_emotion, "transition")
                    
                    if bridge_music and os.path.exists(bridge_music):
                        bridge = AudioSegment.from_file(bridge_music)
                        
                        # Kort bridge: 2-3 sekunder
                        bridge = bridge[10000:13000]  # Ta mitten av sp√•ret
                        bridge = bridge.fade_in(800).fade_out(800)  # Mjuka √∂verg√•ngar
                        bridge = bridge - 20  # L√§gre volym √§n tal
                        
                        combined += bridge
                        logger.info(f"üéµ Added {next_emotion} bridge after segment {i+1}")
                
                # F√∂r sista segmentet: kort outro-musik
                if i == len(segments) - 1:
                    outro_music = self.get_music_for_emotion("professional", "outro")
                    if outro_music and os.path.exists(outro_music):
                        outro = AudioSegment.from_file(outro_music)[-5000:]  # Sista 5 sekunder
                        outro = outro.fade_in(1000) - 18  # Fade in, l√§gre volym
                        combined += outro
            
            # Normalisera och exportera
            combined = normalize(combined)
            combined.export(output_file, format="mp3")
            
            logger.info(f"‚úÖ Podcast with musical bridges created: {output_file}")
            return True
            
        except Exception as e:
            logger.error(f"Error creating podcast with bridges: {e}")
            return False

    def create_segment_with_music(self, speech_file: str, emotion: str, 
                                output_file: str, category: str = "news") -> bool:
        """
        DEPRECATED: Anv√§nd create_podcast_with_musical_bridges ist√§llet
        Skapa ett segment med tal + passande bakgrundsmusik
        """
        logger.warning("create_segment_with_music is deprecated, copying speech only")
        try:
            speech = AudioSegment.from_file(speech_file)
            speech.export(output_file, format="mp3")
            return True
        except Exception as e:
            logger.error(f"Error copying speech file: {e}")
            return False
    
    def combine_segments_with_transitions(self, segments: List[Dict], output_file: str) -> bool:
        """
        Kombinera flera segment med transitions-musik
        
        Args:
            segments: Lista med {'file': path, 'emotion': str}
            output_file: Final utdata-fil
        
        Returns:
            True om framg√•ngsrik
        """
        try:
            combined = AudioSegment.empty()
            
            for i, segment in enumerate(segments):
                # Ladda segment
                segment_audio = AudioSegment.from_file(segment['file'])
                combined += segment_audio
                
                # L√§gg till transition mellan segment (f√∂rutom sista)
                if i < len(segments) - 1:
                    transition_music = self.get_music_for_emotion("professional", "transition")
                    if transition_music and os.path.exists(transition_music):
                        transition = AudioSegment.from_file(transition_music)
                        # Kort transition (2-3 sekunder)
                        transition = transition[:3000].fade_in(500).fade_out(500)
                        transition = transition - 25  # L√§gre volym
                        combined += transition
            
            # Exportera final fil
            combined = normalize(combined)
            combined.export(output_file, format="mp3")
            
            logger.info(f"‚úÖ Combined segments with transitions: {output_file}")
            return True
            
        except Exception as e:
            logger.error(f"Error combining segments: {e}")
            return False
    
    def create_varied_music_background(self, speech_file: str, available_music: List[str], 
                                     output_file: str, music_volume: float = -15, 
                                     segment_duration: int = 60, fade_duration: int = 3000) -> bool:
        """
        Skapa bakgrundsmusik som varierar under avsnittet
        
        Args:
            speech_file: S√∂kv√§g till tal-audio
            available_music: Lista med tillg√§ngliga musikfiler
            output_file: Utdata-fil
            music_volume: Musik-volym i dB (negativ f√∂r l√§gre)
            segment_duration: Sekunder innan musik byts (60s default)
            fade_duration: Crossfade mellan l√•tar i ms (3s default)
        
        Returns:
            True om framg√•ngsrik, False annars
        """
        try:
            if not available_music:
                logger.error("Ingen musik tillg√§nglig f√∂r varierad bakgrund")
                return False
            
            # Ladda tal-audio
            speech = AudioSegment.from_file(speech_file)
            speech_duration_ms = len(speech)
            segment_duration_ms = segment_duration * 1000
            
            logger.info(f"üéµ Skapar varierad musikbakgrund f√∂r {speech_duration_ms/1000:.1f}s tal")
            logger.info(f"üéµ Anv√§nder {len(available_music)} l√•tar, byter var {segment_duration}s")
            
            # Skapa tom bakgrundsmusik
            background = AudioSegment.silent(duration=speech_duration_ms)
            
            # Skapa smart musikurval baserat p√• metadata om m√∂jligt
            import random
            
            # Definiera olika "zoner" f√∂r podcast med olika krav
            music_zones = [
                {"mood": "uplifting", "energy": "medium", "name": "Intro"},
                {"mood": "calm", "energy": "low", "name": "Bakgrund"},
                {"mood": "energetic", "energy": "high", "name": "H√∂jdpunkt"},
                {"mood": "peaceful", "energy": "low", "name": "Transition"}
            ]
            
            # Skapa musik-k√∂ med variation
            music_queue = []
            used_tracks = []
            
            # ALLTID anv√§nd "Mellan Dr√∂m och Verklighet" som F√ñRSTA intro (samma som MMM huvudpodden)
            # Men ALDRIG i bakgrundsmusik eller senare segment
            intro_track = None
            intro_only_music = []
            for track in available_music:
                if "Mellan Dr√∂m och Verklighet" in track:
                    intro_track = track
                    intro_only_music.append(track)  # Spara intro-musik separat
                    break
            
            if intro_track:
                music_queue.append(intro_track)
                used_tracks.append(intro_track)
                logger.info("üéµ Fast intro: Mellan Dr√∂m och Verklighet (samma som MMM huvudpodden)")
            
            # Filtrera bort intro-musik fr√•n tillg√§nglig musik f√∂r bakgrund
            background_music = [m for m in available_music if m not in intro_only_music]
            
            # F√∂rs√∂k anv√§nda metadata-baserat urval f√∂r √∂vriga zoner
            if self.metadata_manager:
                for zone in music_zones[1:]:  # Hoppa √∂ver intro, redan fixerad
                    track_path = self.get_music_by_metadata(
                        mood=zone["mood"], 
                        energy=zone["energy"],
                        exclude=used_tracks
                    )
                    if track_path:
                        music_queue.append(track_path)
                        used_tracks.append(track_path)
                        logger.info(f"üéµ Zon '{zone['name']}': {os.path.basename(track_path)}")
            
            # Fyll upp med resterande musik slumpm√§ssigt (UTAN intro-musik)
            remaining_music = [m for m in background_music if m not in music_queue]
            random.shuffle(remaining_music)
            music_queue.extend(remaining_music)
            
            # Fallback om metadata inte fungerade (anv√§nd background_music, inte available_music)
            if len(music_queue) <= 1:  # Bara intro-l√•t
                fallback_music = background_music.copy()
                random.shuffle(fallback_music)
                music_queue.extend(fallback_music)
            
            current_pos = 0
            music_index = 0
            
            while current_pos < speech_duration_ms:
                # V√§lj n√§sta l√•t (rotera genom k√∂n)
                current_music_file = music_queue[music_index % len(music_queue)]
                music_index += 1
                
                # Ladda musikfil
                try:
                    music_segment = AudioSegment.from_file(current_music_file)
                    music_name = os.path.basename(current_music_file)
                    
                    # Justera volym
                    music_segment = music_segment + music_volume
                    
                    # Ber√§kna hur l√•ng denna sektion ska vara
                    remaining_time = speech_duration_ms - current_pos
                    section_duration = min(segment_duration_ms, remaining_time)
                    
                    # Loopa musik om den √§r kortare √§n sektionen
                    while len(music_segment) < section_duration:
                        music_segment = music_segment + music_segment
                    
                    # Besk√§r till r√§tt l√§ngd
                    music_segment = music_segment[:section_duration]
                    
                    # L√§gg till crossfade om det inte √§r f√∂rsta segmentet
                    if current_pos > 0 and section_duration > fade_duration * 2:
                        music_segment = music_segment.fade_in(fade_duration)
                    
                    # L√§gg till fade-out om det inte √§r sista segmentet
                    if current_pos + section_duration < speech_duration_ms and section_duration > fade_duration * 2:
                        music_segment = music_segment.fade_out(fade_duration)
                    
                    # L√§gg till musiksegment till bakgrund
                    background = background.overlay(music_segment, position=current_pos)
                    
                    logger.info(f"üéµ Segment {current_pos/1000:.1f}s-{(current_pos + section_duration)/1000:.1f}s: {music_name}")
                    
                    current_pos += section_duration
                    
                except Exception as e:
                    logger.error(f"Fel vid laddning av {current_music_file}: {e}")
                    current_pos += segment_duration_ms  # Hoppa √∂ver denna sektion
                    continue
            
            # L√§gg till 10 sekunder musikuttoning efter tal  
            outro_duration_ms = 10000  # 10 sekunder
            final_audio_duration = speech_duration_ms + outro_duration_ms
            
            # Skapa l√§ngre bakgrund f√∂r att inkludera uttoning
            if current_pos < final_audio_duration:
                # L√§gg till sista musiksegmentet f√∂r uttoning
                remaining_music = available_music[music_index % len(available_music)]
                try:
                    outro_music = AudioSegment.from_mp3(remaining_music)
                    outro_music = outro_music + music_volume
                    outro_section = outro_music[:outro_duration_ms]
                    # Fade ut uttoning
                    outro_section = outro_section.fade_out(3000)  # 3 sekunder fade ut
                    background = background.overlay(outro_section, position=speech_duration_ms)
                    logger.info(f"üéµ Musikuttoning: {outro_duration_ms/1000:.1f}s efter tal")
                except Exception as e:
                    logger.error(f"Fel vid uttoning: {e}")
            
            # Mixa tal med varierad bakgrundsmusik (inkl. uttoning)
            mixed = speech.overlay(background)
            
            # Normalisera och exportera
            mixed = normalize(mixed)
            mixed.export(output_file, format="mp3")
            
            logger.info(f"‚úÖ Varierad musikmix sparad: {output_file}")
            logger.info(f"üéµ Anv√§nde {music_index} musiksegment fr√•n {len(set(available_music))} unika l√•tar")
            return True
            
        except Exception as e:
            logger.error(f"Fel vid skapande av varierad musikbakgrund: {e}")
            return False

def test_music_mixer():
    """Test music mixer functionality"""
    mixer = MusicMixer()
    
    print("üéµ Testing Music Mixer")
    print("=" * 40)
    
    # Test emotion mapping
    emotions = ['exciting', 'serious', 'friendly', 'professional']
    
    for emotion in emotions:
        music_file = mixer.get_music_for_emotion(emotion)
        if music_file:
            print(f"‚úÖ {emotion}: {os.path.basename(music_file)}")
        else:
            print(f"‚ùå {emotion}: No music found")

if __name__ == "__main__":
    test_music_mixer()
