#!/usr/bin/env python3
"""
F√∂renklad podcast-generator f√∂r MMM Senaste Nytt
Fokus p√• att n√• 10-minuters l√§ngd
"""

import os
import json
import logging
import feedparser
import requests
from datetime import datetime
from dotenv import load_dotenv
from google.cloud import texttospeech

load_dotenv()

# S√§tt upp Google Cloud credentials
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'google-cloud-service-account.json'

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fetch_news_articles(max_articles=50):
    """H√§mta nyhetsartiklar fr√•n k√§llor"""
    
    print("üì∞ H√§mtar nyheter fr√•n k√§llor...")
    
    with open('sources.json', 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    sources = config.get('sources', [])
    articles = []
    
    for source in sources[:10]:  # Begr√§nsa till f√∂rsta 10 k√§llor f√∂r snabbhet
        if not source.get('enabled', True):
            continue
        
        try:
            print(f"  üîç {source['name']}...")
            feed = feedparser.parse(source['url'])
            
            for entry in feed.entries[:source.get('maxItems', 5)]:
                article = {
                    'title': entry.title,
                    'description': getattr(entry, 'description', ''),
                    'source': source['name'],
                    'category': source.get('category', 'news'),
                    'url': getattr(entry, 'link', ''),
                    'published': getattr(entry, 'published', '')
                }
                articles.append(article)
                
                if len(articles) >= max_articles:
                    break
            
        except Exception as e:
            print(f"    ‚ùå Fel med {source['name']}: {e}")
            continue
    
    print(f"‚úÖ H√§mtade {len(articles)} artiklar totalt")
    return articles

def create_detailed_podcast_script(articles):
    """Skapa ett detaljerat podcastmanus med m√•ls√§ttning 10 minuter"""
    
    print("ü§ñ Genererar detaljerat podcastmanus...")
    
    api_key = os.getenv('OPENROUTER_API_KEY')
    
    # V√§lj de mest intressanta artiklarna
    selected_articles = articles[:15]  # Ta fler artiklar f√∂r mer inneh√•ll
    
    # Skapa sammanfattning av artiklar f√∂r prompten
    articles_summary = "\n\n".join([
        f"ARTIKEL {i+1}:\nTitel: {article['title']}\nK√§lla: {article['source']}\nBeskrivning: {article['description'][:200]}..."
        for i, article in enumerate(selected_articles)
    ])
    
    prompt = f"""Du skapar ett detaljerat 10-minuters podcastsamtal mellan Lisa och Pelle f√∂r "MMM Senaste Nytt".

Lisa: Expert inom h√•llbar teknik och AI, entusiastisk och engagerad
Pelle: AI-specialist med fokus p√• milj√∂l√∂sningar, analytisk men tillg√§nglig

VIKTIGT F√ñR L√ÑNGD: Skapa ett samtal som √§r EXAKT 10 minuter (cirka 4000-5000 ord). M√•ste vara tillr√§ckligt l√•ngt!

ARTIKLAR ATT DISKUTERA:
{articles_summary}

KRAV F√ñR 10-MINUTERS L√ÑNGD:

1. DJUPG√ÖENDE DISKUSSION (inte bara snabba omn√§mnanden):
   - Varje artikel diskuteras i minst 1-2 minuter
   - Lisa och Pelle st√§ller f√∂ljdfr√•gor till varandra
   - Praktiska exempel och verkliga konsekvenser
   - Personliga reflektioner och expertkommentarer

2. INTERAKTIV DIALOG:
   - "Vad tycker du om det h√§r, Pelle?"
   - "Lisa, kan du f√∂rklara hur det fungerar?"
   - "Det p√•minner mig om..."
   - Naturliga √∂verg√•ngar och reaktioner

3. UTF√ñRLIGA F√ñRKLARINGAR:
   - Tekniska begrepp f√∂rklaras f√∂r lyssnare
   - Historisk bakgrund d√§r relevant
   - Framtidsperspektiv och prognoser
   - Svenska perspektiv p√• internationella nyheter

4. OMFATTANDE INNEH√ÖLL:
   - 8-12 olika nyhets√§mnen behandlas
   - Varje √§mne f√•r tillr√§ckligt utrymme
   - Naturliga pauser och sammanfattningar
   - Avslutande reflektion √∂ver dagens teman

FORMAT: Skriv som ren dialog:

LISA: [f√∂rsta mening]
PELLE: [svar och f√∂rdjupning]
LISA: [f√∂ljdfr√•ga eller ny vinkel]
PELLE: [fortsatt diskussion]
...

VIKTIGT: Om dialogen blir kortare √§n 4000 ord, l√§gg till:
- Mer detaljerade diskussioner
- Fler f√∂ljdfr√•gor mellan v√§rdarna
- Utbyggda f√∂rklaringar av teknisk bakgrund
- Mer personliga reflektioner och kommentarer

Skapa nu ett omfattande 10-minuters samtal!"""

    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    data = {
        'model': 'anthropic/claude-3-haiku',
        'messages': [{'role': 'user', 'content': prompt}],
        'max_tokens': 6000  # Mer tokens f√∂r l√§ngre inneh√•ll
    }
    
    try:
        response = requests.post(
            'https://openrouter.ai/api/v1/chat/completions',
            headers=headers,
            json=data,
            timeout=120
        )
        
        if response.status_code == 200:
            result = response.json()
            script = result['choices'][0]['message']['content']
            
            # Analysera l√§ngd
            word_count = len(script.split())
            estimated_minutes = word_count / 150  # 150 ord per minut
            
            print(f"‚úÖ Genererat manus: {word_count} ord")
            print(f"‚è±Ô∏è Uppskattad l√§ngd: {estimated_minutes:.1f} minuter")
            
            # Spara manus
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            script_filename = f"scripts/generated_episode_{timestamp}.txt"
            
            os.makedirs('scripts', exist_ok=True)
            with open(script_filename, 'w', encoding='utf-8') as f:
                f.write(script)
            
            print(f"üìÅ Sparat som: {script_filename}")
            
            return script, word_count, estimated_minutes
            
        else:
            print(f"‚ùå AI-generering fel: {response.status_code} - {response.text}")
            return None, 0, 0
            
    except Exception as e:
        print(f"‚ùå Fel vid scriptgenerering: {e}")
        return None, 0, 0

def parse_script_to_segments(script):
    """Dela upp script i Lisa/Pelle-segment"""
    
    lines = script.strip().split('\n')
    segments = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # Hantera b√•de stora och sm√• bokst√§ver
        if line.startswith('LISA:') or line.startswith('Lisa:'):
            text = line[5:].strip()
            if text:
                segments.append(('Lisa', text))
        elif line.startswith('PELLE:') or line.startswith('Pelle:'):
            text = line[6:].strip()
            if text:
                segments.append(('Pelle', text))
    
    print(f"üé≠ Delat upp i {len(segments)} segment")
    return segments

def generate_tts_audio(segments):
    """Generera TTS-ljud med Chirp3-HD r√∂ster"""
    
    print("üé§ Genererar TTS-ljud...")
    
    client = texttospeech.TextToSpeechClient()
    
    # R√∂stdefinitioner
    voices = {
        'Lisa': texttospeech.VoiceSelectionParams(
            language_code="sv-SE",
            name="sv-SE-Chirp3-HD-Gacrux",
            ssml_gender=texttospeech.SsmlVoiceGender.FEMALE
        ),
        'Pelle': texttospeech.VoiceSelectionParams(
            language_code="sv-SE", 
            name="sv-SE-Chirp3-HD-Charon",
            ssml_gender=texttospeech.SsmlVoiceGender.MALE
        )
    }
    
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.MP3
    )
    
    audio_files = []
    total_cost = 0
    
    for i, (speaker, text) in enumerate(segments):
        print(f"  üéôÔ∏è Segment {i+1}/{len(segments)}: {speaker} ({len(text)} tecken)")
        
        try:
            synthesis_input = texttospeech.SynthesisInput(text=text)
            response = client.synthesize_speech(
                input=synthesis_input,
                voice=voices[speaker],
                audio_config=audio_config
            )
            
            # Spara segment
            filename = f"episode_segment_{i+1:02d}_{speaker.lower()}.mp3"
            filepath = f"audio/{filename}"
            
            with open(filepath, "wb") as out:
                out.write(response.audio_content)
            
            audio_files.append(filepath)
            
            # Kostnad (Chirp3-HD)
            cost = len(text) * 0.000004
            total_cost += cost
            
        except Exception as e:
            print(f"    ‚ùå Fel med segment {i+1}: {e}")
    
    print(f"‚úÖ Genererat {len(audio_files)} ljudfiler")
    print(f"üí∞ Total kostnad: ${total_cost:.4f}")
    
    return audio_files, total_cost

def create_full_episode():
    """Skapa ett komplett avsnitt"""
    
    print("üéôÔ∏è SKAPAR FULLST√ÑNDIGT AVSNITT AV MMM SENASTE NYTT")
    print("="*60)
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"Starttid: {timestamp}")
    
    # 1. H√§mta nyheter
    articles = fetch_news_articles(max_articles=50)
    
    if not articles:
        print("‚ùå Inga artiklar h√§mtades")
        return
    
    # 2. Generera detaljerat manus
    script, word_count, estimated_minutes = create_detailed_podcast_script(articles)
    
    if not script:
        print("‚ùå Kunde inte generera manus")
        return
    
    if estimated_minutes < 8:
        print("‚ö†Ô∏è VARNING: Manus f√∂r kort f√∂r 10-minuters m√•l!")
        print("üí° √ñverv√§g att l√§gga till fler artiklar eller mer detaljerad diskussion")
    
    # 3. Dela upp i segment
    segments = parse_script_to_segments(script)
    
    if not segments:
        print("‚ùå Kunde inte dela upp manus i segment")
        return
    
    # 4. Generera TTS
    audio_files, total_cost = generate_tts_audio(segments)
    
    # 5. Sammanfattning
    print(f"\nüéâ AVSNITT KLART!")
    print(f"üìä Statistik:")
    print(f"   ‚Ä¢ Artiklar: {len(articles)}")
    print(f"   ‚Ä¢ Ord i manus: {word_count}")
    print(f"   ‚Ä¢ Uppskattad l√§ngd: {estimated_minutes:.1f} minuter")
    print(f"   ‚Ä¢ Audio-segment: {len(audio_files)}")
    print(f"   ‚Ä¢ Kostnad: ${total_cost:.4f}")
    print(f"\nüìÅ Filer:")
    print(f"   ‚Ä¢ Manus: scripts/generated_episode_*.txt")
    print(f"   ‚Ä¢ Audio: audio/episode_segment_*.mp3")
    
    print(f"\nüí° N√§sta steg:")
    print(f"   1. Lyssna p√• audio-filerna f√∂r kvalitetskontroll")
    print(f"   2. L√§gg ihop i Audacity med musik")
    print(f"   3. Testa upload till Cloudflare om n√∂jd")

if __name__ == "__main__":
    create_full_episode()