#!/usr/bin/env python3
"""
Testa svenska r√∂ster som st√∂der SSML
"""

import os
from google.cloud import texttospeech

def test_swedish_ssml_voices():
    """Testar svenska r√∂ster med SSML-st√∂d"""
    
    # S√§tt upp credentials
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'google-cloud-service-account.json'
    
    try:
        client = texttospeech.TextToSpeechClient()
        
        # Svenska r√∂ster som ST√ñDER SSML (baserat p√• Google-dokumentation)
        ssml_voices = [
            # Standard-r√∂ster (grundl√§ggande SSML)
            {"name": "sv-SE-Standard-A", "gender": "FEMALE", "type": "Standard"},
            {"name": "sv-SE-Standard-B", "gender": "FEMALE", "type": "Standard"}, 
            {"name": "sv-SE-Standard-C", "gender": "FEMALE", "type": "Standard"},
            {"name": "sv-SE-Standard-D", "gender": "MALE", "type": "Standard"},
            {"name": "sv-SE-Standard-E", "gender": "MALE", "type": "Standard"},
            
            # WaveNet-r√∂ster (b√§ttre kvalitet + SSML)
            {"name": "sv-SE-Wavenet-A", "gender": "FEMALE", "type": "WaveNet"},
            {"name": "sv-SE-Wavenet-B", "gender": "FEMALE", "type": "WaveNet"},
            {"name": "sv-SE-Wavenet-C", "gender": "MALE", "type": "WaveNet"},
            {"name": "sv-SE-Wavenet-D", "gender": "FEMALE", "type": "WaveNet"},
            {"name": "sv-SE-Wavenet-E", "gender": "MALE", "type": "WaveNet"},
        ]
        
        print("üß™ TESTAR: Svenska r√∂ster med SSML-st√∂d")
        print("=" * 50)
        
        # Test-text med SSML f√∂r k√§nslom√§ssig styrning
        test_texts = [
            {
                "name": "Normal",
                "ssml": """<speak>
                    Hej och v√§lkommen till dagens avsnitt av MMM Senaste Nytt!
                </speak>"""
            },
            {
                "name": "Betonad + L√•ngsam",
                "ssml": """<speak>
                    <prosody rate="slow" pitch="+2st">
                        <emphasis level="strong">Fantastiska nyheter</emphasis> fr√•n teknikv√§rlden idag!
                    </prosody>
                </speak>"""
            },
            {
                "name": "Glad/Exalterad stil",
                "ssml": """<speak>
                    <prosody rate="medium" pitch="+5st" volume="loud">
                        Det h√§r √§r verkligen <emphasis level="strong">sp√§nnande</emphasis>!
                        <break time="0.5s"/>
                        Ni kommer aldrig att gissa vad som h√§nt!
                    </prosody>
                </speak>"""
            },
            {
                "name": "Seri√∂s/Bekymrad stil", 
                "ssml": """<speak>
                    <prosody rate="slow" pitch="-2st" volume="medium">
                        Detta √§r <emphasis level="moderate">verkligen bekymrande</emphasis>.
                        <break time="0.8s"/>
                        Vi m√•ste ta det h√§r p√• allvar.
                    </prosody>
                </speak>"""
            }
        ]
        
        # Testa bara de b√§sta WaveNet-r√∂sterna
        best_voices = [
            {"name": "sv-SE-Wavenet-A", "gender": "FEMALE", "type": "WaveNet"},
            {"name": "sv-SE-Wavenet-C", "gender": "MALE", "type": "WaveNet"},
        ]
        
        for voice_info in best_voices:
            voice_name = voice_info["name"]
            gender = getattr(texttospeech.SsmlVoiceGender, voice_info["gender"])
            
            print(f"\nüé§ {voice_name} ({voice_info['gender']}):")
            
            for i, test_text in enumerate(test_texts):
                try:
                    # Konfigurera r√∂st
                    voice = texttospeech.VoiceSelectionParams(
                        language_code="sv-SE",
                        name=voice_name,
                        ssml_gender=gender,
                    )
                    
                    # Audio konfiguration
                    audio_config = texttospeech.AudioConfig(
                        audio_encoding=texttospeech.AudioEncoding.MP3,
                        sample_rate_hertz=24000
                    )
                    
                    # Anv√§nd SSML input ist√§llet f√∂r text
                    synthesis_input = texttospeech.SynthesisInput(ssml=test_text["ssml"])
                    
                    # Generera tal
                    response = client.synthesize_speech(
                        input=synthesis_input,
                        voice=voice,
                        audio_config=audio_config
                    )
                    
                    # Spara fil
                    safe_voice = voice_name.lower().replace("-", "_")
                    filename = f"audio/ssml_test_{safe_voice}_{i+1}_{test_text['name'].lower().replace(' ', '_').replace('/', '_')}.mp3"
                    
                    with open(filename, "wb") as out:
                        out.write(response.audio_content)
                    
                    file_size = len(response.audio_content)
                    print(f"   ‚úÖ {test_text['name']}: {filename} ({file_size} bytes)")
                    
                except Exception as e:
                    print(f"   ‚ùå {test_text['name']}: {str(e)}")
        
        print(f"\nüéß RESULTAT:")
        print("   ‚Ä¢ Test-filer skapade i audio/ mappen")
        print("   ‚Ä¢ J√§mf√∂r kvalitet och k√§nslom√§ssig styrning")
        print("   ‚Ä¢ √Ñr WaveNet + SSML tillr√§ckligt bra som ers√§ttning?")
        print("\nüí∞ KOSTNAD:")
        print("   ‚Ä¢ WaveNet: $0.016 per 1000 tecken (4x dyrare √§n Chirp3-HD)")
        print("   ‚Ä¢ Fortfarande 11x billigare √§n ElevenLabs!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fel vid SSML-test: {str(e)}")
        return False

if __name__ == "__main__":
    test_swedish_ssml_voices()