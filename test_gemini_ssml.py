#!/usr/bin/env python3
"""
Test script to explore if Gemini models can generate SSML instructions
for emotional variation in Google Cloud TTS.
"""

import google.generativeai as genai
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_gemini_ssml_generation():
    """Test if Gemini can generate SSML with emotional instructions."""
    
    # Set up Gemini API key
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå GEMINI_API_KEY not found in environment variables")
        return None
    
    genai.configure(api_key=api_key)
    
    # Initialize Gemini model
    model = genai.GenerativeModel('gemini-1.5-flash')
    
    # Test script from our podcast
    test_script = """
    Hej och v√§lkomna till v√•r morgonpodd! 
    
    Idag ska vi prata om n√•got verkligen sp√§nnande - vi har hittat en ny artist som kommer att f√∂r√§ndra hela musikscenen. 
    
    Men f√∂rst... lite mer seri√∂sa nyheter. Situationen i v√§rlden just nu kr√§ver v√•r uppm√§rksamhet.
    
    Det h√§r √§r verkligen viktigt att komma ih√•g, alla lyssnare!
    
    Men nu tillbaka till den glada st√§mningen - vi avslutar med veckans b√§sta l√•t!
    """
    
    prompt = f"""
    Du √§r expert p√• att konvertera podcastmanus till SSML-kod (Speech Synthesis Markup Language) som kan anv√§ndas med Google Cloud Text-to-Speech f√∂r att skapa emotionella variationer.

    Konvertera f√∂ljande svenska podcastmanus till v√§lformulerad SSML-kod:

    {test_script}

    Anv√§nd dessa SSML-taggar strategiskt:
    - <prosody rate="fast/medium/slow" pitch="+4st/+2st/default/-2st" volume="loud/medium/soft"> f√∂r tempo, tonh√∂jd och volym
    - <emphasis level="strong/moderate"> f√∂r betoning  
    - <break time="1s/500ms"/> f√∂r pauser
    - <speak> som wrapper

    Variera stilen intelligent baserat p√• inneh√•llet:
    - Energisk och snabb f√∂r v√§lkomnande (rate="fast", pitch="+2st")
    - Sp√§nnande f√∂r musiknyheter (pitch="+4st", emphasis)
    - Allvarlig f√∂r seri√∂sa nyheter (rate="slow", pitch="-2st")
    - Stark betoning f√∂r viktiga po√§nger (emphasis level="strong")
    - Glad och medel f√∂r avslutning (rate="medium", pitch="+1st")

    Ge mig den kompletta SSML-koden som √§r redo att anv√§ndas:
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"‚ùå Error with Gemini API: {e}")
        return None

def main():
    print("ü§ñ Testing Gemini for SSML generation...\n")
    
    # Test Gemini's ability to generate emotional SSML
    ssml_result = test_gemini_ssml_generation()
    
    if ssml_result:
        print("‚úÖ Gemini generated SSML with emotional variations:")
        print("="*60)
        print(ssml_result)
        print("="*60)
        print("\nüí° Key Insight:")
        print("Gemini CAN help generate intelligent SSML markup,")
        print("but we still need Google Cloud TTS WaveNet voices")  
        print("(not Chirp3-HD) to actually synthesize SSML.")
        print("\nThis could be our optimal workflow:")
        print("1. Gemini generates emotionally-aware SSML")
        print("2. WaveNet voices synthesize with SSML support")
        print("3. Cost: $0.016/1000 chars (still 11x cheaper than ElevenLabs)")
        
        # Save the generated SSML
        with open('gemini_generated_ssml_sample.txt', 'w', encoding='utf-8') as f:
            f.write(ssml_result)
        print(f"\nüìÅ Saved to: gemini_generated_ssml_sample.txt")
        
    else:
        print("‚ùå Could not test Gemini for SSML generation")
        print("Check your GEMINI_API_KEY in .env file")

if __name__ == "__main__":
    main()